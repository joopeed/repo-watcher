library("ggplot2")
library(plyr)
data <- read.table("only_distributed.txt", header=T)
data <- subset(data, distribution=="distributed") 

## Summarizes data.
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
                      conf.interval=.95, .drop=TRUE) {
    require(plyr)

    # New version of length which can handle NA's: if na.rm==T, don't count them
    length2 <- function (x, na.rm=FALSE) {
        if (na.rm) sum(!is.na(x))
        else       length(x)
    }

    # This is does the summary; it's not easy to understand...
    datac <- ddply(data, groupvars, .drop=.drop,
                   .fun= function(xx, col, na.rm) {
                           c( N    = length2(xx[,col], na.rm=na.rm),
                              mean = mean   (xx[,col], na.rm=na.rm),
                              sd   = sd     (xx[,col], na.rm=na.rm)
                              )
                          },
                    measurevar,
                    na.rm
             )

    # Rename the "mean" column    
    datac <- rename(datac, c("mean"=measurevar))

    datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean

    # Confidence interval multiplier for standard error
    # Calculate t-statistic for confidence interval: 
    # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
    ciMult <- qt(conf.interval/2 + .5, datac$N-1)
    datac$ci <- datac$se * ciMult

    return(datac)
}

m2 <- summarySE(data, measurevar="makespan", groupvars=c("workload", "jvm"))
ggplot(m2, aes(x = jvm, y = makespan, fill=jvm)) + geom_bar(position=position_dodge(.9), stat = "identity", width=.5)  + geom_errorbar(aes(ymin=makespan-ci, ymax=makespan+ci),width=.2) + facet_grid(workload~., scales="free_y")
ggsave("jvm_bar2.png", dpi = 250)  


#workload\tsample\tmakespan\tdistribution\tjvm
#png("jvm_bar.png")
#mm <- ddply(data, .(jvm, workload), summarise, makespan = mean(makespan))
mm <- summarySE(data, measurevar="makespan", groupvars=c("workload", "synchronization", "jvm"))
ggplot(mm, aes(x = jvm, y = makespan, fill=jvm)) + geom_bar(position=position_dodge(.9), stat = "identity", width=.5)  + geom_errorbar(aes(ymin=log(makespan-ci), ymax=log(makespan+ci)),width=.2,position=position_dodge(.3)) + facet_grid(workload~synchronization, scales="free_y")
ggsave("jvm_bar.png", dpi = 250)  


datasync <- subset(data, synchronization=="sync")
dataasync <- subset(data, synchronization=="async")  
#dev.off()
#png("synchronization_and_jvm.png")
ggplot(data, aes(synchronization, log(makespan)))+ geom_boxplot(aes(fill=workload)) + facet_grid(workload~jvm, scales="free_y")
ggsave("synchronization_and_jvm.png", width=6, height=6, dpi = 300) 
ggplot(datasync, aes(jvm, log(makespan))) + geom_boxplot(aes(fill=workload)) + facet_grid(workload~., scales="free")
ggsave("linux_jvm_sync.png", width=6, height=6,  dpi = 250)
ggplot(dataasync, aes(jvm, log(makespan))) + geom_boxplot(aes(fill=workload)) + facet_grid(workload~., scales="free")
ggsave("linux_jvm_async.png", width=6, height=6,  dpi = 250)
#dev.off()
ggplot(data, aes(synchronization, log(makespan)))+ geom_boxplot(aes(fill=workload)) + facet_grid(workload~., scales="free_y")
ggsave("synchronization.png", width=6, height=6, dpi = 250)
#dev.off()
#w13 <- subset(data, workload=="workload1" | workload=="workload3") 
#png("jvmw1w3.png")
#ggplot(w13, aes(synchronization, makespan)) + geom_boxplot(aes(fill=workload)) + facet_grid(workload~jvm, scales="free_y")
#dev.off()
#png("jvm2.png")
#ggplot(data, aes(jvm, makespan)) + geom_boxplot(aes(fill=workload)) + facet_grid(.~workload, scales="free_y")
#dev.off()



